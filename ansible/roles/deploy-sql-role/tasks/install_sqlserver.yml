---
- name: Determine if the default instance exists.
  ansible.windows.win_service:
    name: 'MSSQLSERVER'
  register: service_info

# - name: End play if default instance already exists.
#   ansible.builtin.meta: end_play
#   when: service_info.exists

- name: Create temp folder on target
  ansible.windows.win_file:
    path: '{{ temp_directory }}'
    state: directory
  # when:
  #   - not service_info.exists

# - name: Copy sql Configuration
#   win_copy:
#     src: sql_configuration/Configuration.ini
#     dest: "{{ temp_directory }}\\Configuration.ini" 
#     when:
#       - not service_info.exists       

- name: Create the registry key and value for sql server
  win_regedit:
    path: HKLM:\Software\Microsoft\Cryptography\Protect\Providers\df9d8cd0-1501-11d1-8c7a-00c04fc297eb
    name: ProtectionPolicy
    data: 1
    type: dword
    state: present

# - name: Create the .ini file with UTF-8 encoding using a template
#   ansible.builtin.win_template:
#     src: sql_configuration/Configuration.ini
#     dest: "{{ temp_directory }}\\Configuration.ini"
#     encoding: utf-8
#     remote_src: false

- name: Download dependencies files
  ansible.windows.win_get_url:
    url: "{{ item }}"
    dest: "{{ temp_directory }}\\{{ item | basename }}"
    force: false 
  loop: "{{ download_urls }}"
  when:
    - not service_info.exists

# - name: Grant full control to creator
#   win_acl:
#     path: "{{ temp_directory }}"  # Path to the file or folder
#     user: Everyone           # Special user representing the creator
#     rights: FullControl            # Permission rights (e.g., 'full_control', 'read', 'modify')
#     state: present
#     type: allow 

- name: Mount ISO
  community.windows.win_disk_image:
    image_path: '{{ temp_directory }}\SQLServer2022-x64-ENU.iso'
    state: present
  register: disk_image_out
  when:
    - not service_info.exists      

- name: Debug disk_image_out
  ansible.builtin.debug:
    var: disk_image_out.mount_paths[0]
  when:
    - not service_info.exists        

- name: SQL Server SA password
  ansible.builtin.set_fact:
    sa_sql_password: "{{ '/SAPWD={{ sa_mssql_sapwd }}' }}"

- name: Install sql instance
  # ansible.windows.win_command: '{{ disk_image_out.mount_paths[0] }}setup.exe /ConfigurationFile={{ temp_directory }}\Configuration.ini {{ sa_sql_password }}'
  ansible.windows.win_command: '{{ disk_image_out.mount_paths[0] }}setup.exe /QUIET=True /ACTION=Install /FEATURES=SQLEngine,FullText,RS,Tools /INSTANCENAME=MSSQLSERVER /SQLSYSADMINACCOUNTS="BUILTIN\ADMINISTRATORS" /TCPENABLED=1 /SECURITYMODE=SQL /IACCEPTSQLSERVERLICENSETERMS=True /IACCEPTROPENLICENSETERMS=True /ENU=True /SUPPRESSPRIVACYSTATEMENTNOTICE=True /SUPPRESSPAIDEDITIONNOTICE=True /UpdateEnabled=False /USEMICROSOFTUPDATE=False {{ sa_sql_password }}'
  # register: command_result
  # retries: 1
  # delay: 10  # Delay between retries in seconds
  # until: command_result.rc == 0  # Retry until the command succeeds (exit code 0)
  become: yes
  become_user: SYSTEM  # SYSTEM is the equivalent of admin-level user
  become_method: runas  # Elevates the command
  when:
    - not service_info.exists

- name: Unmount ISO
  community.windows.win_disk_image:
    image_path: '{{ temp_directory }}\SQLServer2022-x64-ENU.iso'
    state: absent
  when:
    - not service_info.exists         

# - name: Cleanup temp directory
#   ansible.windows.win_file:
#     path: '{{ temp_directory }}'
#     state: absent   
#   when:
#     - not service_info.exists                                         

- name: Firewall rule to allow TCP port 1433
  community.windows.win_firewall_rule:
    name: '1433'
    localport: '1433'
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: true
